---
version: "1.1.0"
name: "Build"
root:
  testCase:
    nodeName: "Build"
    children:
      - check:
          nodeName: "Check BRANCH is given"
          expression: "binding.hasVariable(\"BRANCH\") && !BRANCH.isBlank()"
      - check:
          nodeName: "Check PROJECT is given"
          expression: "binding.hasVariable(\"PROJECT\") && !PROJECT.isBlank()"
      - check:
          nodeName: "Check ENVIRONMENT is given"
          expression: "binding.hasVariable(\"ENVIRONMENT\") && !ENVIRONMENT.isBlank()"
      - if:
          nodeName: "If ENVIRONMENT==\"PRODUCTION\""
          children:
            - check:
                nodeName: "Check VERSION is given when releasing into PRODUCTION"
                expression: "binding.hasVariable(\"VERSION\") && !VERSION.isBlank()"
            - check:
                nodeName: "Check VERSION is properly formated"
                expression: "VERSION ==~ /\\d+\\.\\d+\\.\\d+/"
          condition:
            expression: "ENVIRONMENT==\"PRODUCTION\""
      - set:
          nodeName: "Init SCALEUP"
          key: "SCALEUP"
      - if:
          nodeName: "If OS==LINUX"
          children:
            - callPlan:
                nodeName: "Scale Up Build Agents"
                planId: "6386268253799329484c57ef"
          condition:
            expression: "OS==\"LINUX\""
      - sequence:
          children:
            - session:
                children:
                  - sequence:
                      nodeName: "Main Sequence"
                      children:
                        - echo:
                            nodeName: "Echo info"
                            text:
                              expression: "\"Building ${PROJECT}, for branch ${BRANCH} version\
                        \ ${VERSION} in environment ${ENVIRONMENT}\""
                        - callPlan:
                            nodeName: "Create unique folder"
                            planId: "618aa49f34603040f758fd12"
                        - callPlan:
                            nodeName: "Checkout git"
                            planId: "63fc7ffd32ed452ab30e0116"
                        - set:
                            nodeName: "Init JSON"
                            key: "JSON"
                        - callPlan:
                            nodeName: "Read JSON"
                            planId: "618aa49f34603040f758fd0b"
                        - callPlan:
                            nodeName: "Run action"
                            planId: "618aa49f34603040f758fd15"
                        - callPlan:
                            nodeName: "Create release"
                            planId: "64145b48d91d580809da608f"
                        - retryIfFails:
                            children:
                              - callPlan:
                                  nodeName: "Set latest version"
                                  planId: "63ff232032ed452ab35619aa"
                            maxRetries: 3
                            reportLastTryOnly: true
                        - set:
                            nodeName: "Set STATUS at PASSED"
                            key: "STATUS"
                            value: "PASSED"
                      before:
                        continueOnError: false
                        steps:
                          - set:
                              nodeName: "Init STATUS - FAILED"
                              key: "STATUS"
                              value: "FAILED"
                          - set:
                              nodeName: "Init FOLDER"
                              key: "FOLDER"
                              value:
                                expression: ""
                          - set:
                              nodeName: "Init FTP_FILES"
                              continueParentNodeExecutionOnError: true
                              key: "FTP_FILES"
                          - set:
                              nodeName: "Init TESTS"
                              key: "TESTS"
                          - set:
                              nodeName: "Init DEPLOYED_INSTANCES"
                              continueParentNodeExecutionOnError: true
                              key: "DEPLOYED_INSTANCES"
                          - set:
                              nodeName: "Set BRANCH_EXIST if not given"
                              key: "BRANCH_EXIST"
                              value:
                                expression: "!binding.hasVariable(\"BRANCH_EXIST\")? true\
                          \ : Boolean.parseBoolean(\"${BRANCH_EXIST}\")"
                          - set:
                              nodeName: "Set OS if not given"
                              key: "OS"
                              value:
                                expression: "!binding.hasVariable(\"OS\")? \"LINUX\" : OS"
                          - set:
                              nodeName: "Set SHOULD_PROPAGATE if not given"
                              key: "SHOULD_PROPAGATE"
                              value:
                                expression: "!binding.hasVariable(\"SHOULD_PROPAGATE\")? true\
                          \ : Boolean.parseBoolean(\"${SHOULD_PROPAGATE}\")"
                          - set:
                              nodeName: "Set EMAIL if not given"
                              key: "EMAIL"
                              value:
                                expression: "!binding.hasVariable(\"EMAIL\")? DEFAULT_EMAIL\
                          \ : EMAIL"
                          - set:
                              nodeName: "Set AUTHOR if not given"
                              key: "AUTHOR"
                              value:
                                expression: "!binding.hasVariable(\"AUTHOR\")? \"Dev team\"\
                          \ : AUTHOR"
                          - set:
                              nodeName: "Set SEND_EMAIL if not given"
                              key: "SEND_EMAIL"
                              value:
                                expression: "!binding.hasVariable(\"SEND_EMAIL\")?true:Boolean.parseBoolean(\"\
                          ${SEND_EMAIL}\")"
                          - set:
                              nodeName: "Set VERSION if not given"
                              key: "VERSION"
                              value:
                                expression: "(!binding.hasVariable(\"VERSION\") || VERSION.isBlank())?\
                          \ \"${new Date().format(\"YYYY.M.d\")}-${context.getExecutionId()}\"\
                          \ : VERSION"
                      after:
                        continueOnError: false
                        steps:
                          - sequence:
                              nodeName: "AfterSequence - Set result"
                              children:
                                - callPlan:
                                    nodeName: "Set build result"
                                    planId: "64145bc4d91d580809daa2f1"
                                - if:
                                    nodeName: "If ENVIRONMENT==\"PRODUCTION\" && STATUS==\"\
                            PASSED\""
                                    children:
                                      - set:
                                          nodeName: "Set EXEC_ID"
                                          key: "EXEC_ID"
                                          value:
                                            expression: "context.getExecutionId()"
                                      - callKeyword:
                                          nodeName: "Set as \"Retain this execution\""
                                          inputs:
                                            - URL:
                                                expression: "\"${K8S_BUILD_INSTANCE_URL}/rest/housekeeping/execution/${EXEC_ID}/protection\""
                                            - Method: "POST"
                                            - Header_content-type: "application/json"
                                            - Data: "true"
                                          keyword: "HttpRequest"
                                    condition:
                                      expression: "ENVIRONMENT==\"PRODUCTION\" && STATUS==\"\
                              PASSED\""
                          - sequence:
                              nodeName: "AfterSequence - Send email"
                              children:
                                - if:
                                    nodeName: "If SEND_EMAIL"
                                    children:
                                      - retryIfFails:
                                          children:
                                            - callPlan:
                                                nodeName: "Send Email"
                                                planId: "6229efeaf270a8319dfbee2e"
                                          maxRetries: 3
                                    condition:
                                      expression: "SEND_EMAIL"
                              continueOnError: true
                          - sequence:
                              nodeName: "AfterSequence - Clean folder"
                              children:
                                - callKeyword:
                                    nodeName: "Rmdir ${FOLDER}"
                                    inputs:
                                      - Folder:
                                          expression: "FOLDER"
                                    keyword: "Rmdir"
                          - sequence:
                              nodeName: "AfterSequence - Propagate build"
                              children:
                                - if:
                                    nodeName: "If SHOULD_PROPAGATE && PASSED"
                                    children:
                                      - callPlan:
                                          nodeName: "Propagate build - scale down the agent if\
                                \ needed"
                                          planId: "63ff47ed32ed452ab35c23d0"
                                    condition:
                                      expression: "STATUS.equals(\"PASSED\") &&  SHOULD_PROPAGATE"
                          - sequence:
                              nodeName: "AfterSequence - Scale down agent if needed"
                              children:
                                - if:
                                    nodeName: "If STATUS is not \"PASSED\" or SHOULD_PROPAGATE\
                            \ is false"
                                    children:
                                      - callPlan:
                                          nodeName: "Scale Down Build Agents - After Execution"
                                          planId: "6482daa9cdd45e7199acdcac"
                                    condition:
                                      expression: "!STATUS.equals(\"PASSED\") || !SHOULD_PROPAGATE"
                routing:
                  - OS:
                      expression: "OS"
                  - type: "build"
          continueOnError: true
