---
version: "1.0.0"
name: "converted plaintext plan"
root:
  testCase:
    nodeName: "converted plaintext plan"
    skipNode: false
    instrumentNode: false
    continueParentNodeExecutionOnError: false
    children:
      - set:
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          key: "key"
          value:
            expression: "\"value with space\""
      - set:
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          key: "key2"
          value:
            expression: "\"value2\""
      - check:
          nodeName: "works"
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          expression: "key2.toString().equals('value2')"
      - check:
          nodeName: "compile error"
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          expression: "key2.toString().equals(\"value2\")"
      - check:
          nodeName: "compile error"
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          expression: "key.toString().equals('value with space')"
      - check:
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          expression: "key.toString().equals('value with space')"
      - callKeyword:
          skipNode: false
          instrumentNode: false
          continueParentNodeExecutionOnError: false
          children:
            - assert:
                skipNode: false
                instrumentNode: false
                continueParentNodeExecutionOnError: false
                actual: "isSendSuccess"
                operator: "EQUALS"
                doNegate: false
                expected:
                  expression: "\"true\""
                customErrorMessage: ""
          remote: true
          keyword: "GroovyCheck"
