package step.plugins.timeseries.migration;

import org.junit.Test;
import step.core.collections.*;
import step.core.collections.Collection;
import step.core.collections.inmemory.InMemoryCollectionFactory;
import step.migration.MigrationContext;

import java.util.*;

import static org.junit.Assert.*;

public class MigrateDashboardsTest {
    
    private final CollectionFactory collectionFactory;
    private final Collection<Document> dashboardCollection;
    
    public MigrateDashboardsTest() {
		super();
		
		this.collectionFactory = new InMemoryCollectionFactory(null);
		this.dashboardCollection = collectionFactory.getCollection("dashboards", Document.class);
	}
    
    @Test
    public void migrateTest() {
        Document grafanaDashboard = createGrafanaDashboard();
        Document oldDashboard = createOldDashboard();
        Document legacyDashboard = createLegacyDashboard(); // shouldn't be touched
        dashboardCollection.save(grafanaDashboard);
        dashboardCollection.save(oldDashboard);
        dashboardCollection.save(legacyDashboard);
        new MigrateDashboardsTask(collectionFactory, new MigrationContext()).runUpgradeScript();
        Document migratedDashboard = dashboardCollection.find(Filters.equals("id", oldDashboard.getId()), null, null, null, 0).findFirst().orElseThrow();
        //old dashboard in inMemoryCollection will be modified, recreate it
        oldDashboard = createOldDashboard();
        assertDocumentsMatching(oldDashboard, migratedDashboard);
        assertEquals(2, dashboardCollection.count(Filters.empty(), 10));
    }


    private void assertDocumentsMatching(Document old, Document migrated) {
        assertNull(migrated.get("name"));
        assertEquals(old.get("name"), migrated.getObject("attributes").get("name"));
        assertEquals(old.get("description"), migrated.get("description"));
        assertEquals(old.get("size"), migrated.get("size"));
        assertEquals(old.getArray("grouping").size(), migrated.getArray("grouping").size());
        assertEquals(old.getArray("filters").size(), migrated.getArray("filters").size());
        assertEquals(old.getObject("metadata").size(), migrated.getObject("metadata").size());
        List<DocumentObject> oldDashlets = old.getArray("dashlets");
        List<DocumentObject> newDashlets = migrated.getArray("dashlets");
        assertEquals(oldDashlets.size(), newDashlets.size());
        for (int i = 0; i < newDashlets.size(); i++) {
            DocumentObject newItem = newDashlets.get(i);
            DocumentObject oldItem = oldDashlets.get(i);
            DocumentObject newChartSettings = newItem.getObject("chartSettings");
            DocumentObject oldChartSettings = oldItem.getObject("chartSettings");
            assertNotNull(newItem.getString("id"));
            assertNull(newChartSettings.get("metricKey"));
            assertNull(newChartSettings.get("filters"));
            assertNull(newChartSettings.get("oql"));
            assertNull(newChartSettings.get("grouping"));
            assertNull(newChartSettings.get("inheritGlobalFilters"));
            assertNull(newChartSettings.get("inheritGlobalGrouping"));
            assertNull(newChartSettings.get("readonlyGrouping"));
            assertNull(newChartSettings.get("readonlyAggregate"));
            
            assertEquals(newItem.get("metricKey"), oldChartSettings.get("metricKey"));
            assertEquals(newItem.getArray("attributes").size(), oldChartSettings.getArray("attributes").size());
            assertEquals(newItem.getArray("filters").size(), oldChartSettings.getArray("filters").size());
            assertEquals(newItem.get("oql"), oldChartSettings.get("oql"));
            assertNotNull(newItem.get("inheritGlobalFilters"));
            assertEquals(newItem.get("inheritGlobalFilters"), oldChartSettings.get("inheritGlobalFilters"));
            assertNotNull(newItem.get("inheritGlobalGrouping"));
            assertEquals(newItem.get("inheritGlobalGrouping"), oldChartSettings.get("inheritGlobalGrouping"));
            assertNotNull(newItem.get("readonlyGrouping"));
            assertEquals(newItem.get("readonlyGrouping"), oldChartSettings.get("readonlyGrouping"));
            assertNotNull(newItem.get("readonlyAggregate"));
            assertEquals(newItem.get("readonlyAggregate"), oldChartSettings.get("readonlyAggregate"));
            
        }
    }
    
    private Document createOldDashboard() {
        List<DocumentObject> dashlets = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            DocumentObject dashlet = new DocumentObject();
            // no id for the dashlet. it should be generated by the migrator
            dashlet.put("name", "someName");
            dashlet.put("type", "CHART");
            dashlet.put("size", 1);
            DocumentObject chartSettings = new DocumentObject();
            chartSettings.put("metricKey", "some metric key");
            chartSettings.put("attributes", Collections.emptyList());
            chartSettings.put("filters", Collections.emptyList());
            chartSettings.put("oql", "some metric oql");
            chartSettings.put("grouping", Arrays.asList("name"));
            chartSettings.put("inheritGlobalFilters", true);
            chartSettings.put("inheritGlobalGrouping", true);
            chartSettings.put("readonlyGrouping", true);
            chartSettings.put("readonlyAggregate", true);
            
            dashlet.put("chartSettings", chartSettings);
            dashlets.add(dashlet);
        }
        
        Document root = new Document();
        root.put("name", "some dashboard name");
        root.put("description", "some description");
        root.put("grouping", Collections.emptyList());
        root.put("filters", Collections.emptyList());
        root.put("dashlets", dashlets);
        root.put("metadata", new HashMap<>());
        return root;
    }
    
    /**
     * Legacy dashboard has no settings, and has the 'isLegacy' flag set. It is treated differently in FE.
     */
    private Document createLegacyDashboard() {
        Document root = new Document();
        HashMap<Object, Object> metadata = new HashMap<>();
        metadata.put("isLegacy", true);
        root.put("description", "Legacy dashboard desc");
        root.put("name", "legacy dash name");
        root.put("metadata", metadata);
        return root;
    }


    private Document createGrafanaDashboard() {
        Document document = new Document();
        document.put("uid", "some grafana id");
        return document;
    }
}
